// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using crudProdutos.Data;

namespace crudProdutos.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230511210104_Version02")]
    partial class Version02
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5");

            modelBuilder.Entity("crudProdutos.Models.Favorito", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdProduto")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("TEXT");

                    b.HasKey("IdUsuario", "IdProduto");

                    b.HasIndex("IdProduto");

                    b.ToTable("Favoritos");
                });

            modelBuilder.Entity("crudProdutos.Models.ItemPedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdProduto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ValorVoluntario")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPedido", "IdProduto");

                    b.HasIndex("IdProduto");

                    b.ToTable("ItensPedido");
                });

            modelBuilder.Entity("crudProdutos.Models.Pedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataHoraPedido")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Situacao")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPedido");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("crudProdutos.Models.Produto", b =>
                {
                    b.Property<int>("IdProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(1000);

                    b.Property<int?>("Estoque")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProduto");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("crudProdutos.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(11);

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("Situacao")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Telefone")
                        .HasColumnType("INTEGER")
                        .HasMaxLength(11);

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("crudProdutos.Models.Visitado", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdProduto")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("TEXT");

                    b.HasKey("IdUsuario", "IdProduto");

                    b.HasIndex("IdProduto");

                    b.ToTable("Visitados");
                });

            modelBuilder.Entity("crudProdutos.Models.Favorito", b =>
                {
                    b.HasOne("crudProdutos.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("crudProdutos.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("crudProdutos.Models.ItemPedido", b =>
                {
                    b.HasOne("crudProdutos.Models.Pedido", "Pedido")
                        .WithMany("ItensPedido")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("crudProdutos.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("crudProdutos.Models.Pedido", b =>
                {
                    b.HasOne("crudProdutos.Models.Usuario", "Usuario")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdUsuario");

                    b.OwnsOne("crudProdutos.Models.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<int>("PedidoIdPedido")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasMaxLength(50);

                            b1.Property<string>("CEP")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasMaxLength(2);

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasMaxLength(50);

                            b1.Property<string>("Complemento")
                                .HasColumnType("TEXT")
                                .HasMaxLength(100);

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasMaxLength(2);

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasMaxLength(100);

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasMaxLength(10);

                            b1.Property<string>("Referencia")
                                .HasColumnType("TEXT")
                                .HasMaxLength(100);

                            b1.HasKey("PedidoIdPedido");

                            b1.ToTable("Pedidos");

                            b1.WithOwner()
                                .HasForeignKey("PedidoIdPedido");
                        });
                });

            modelBuilder.Entity("crudProdutos.Models.Usuario", b =>
                {
                    b.OwnsOne("crudProdutos.Models.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<int>("UsuarioIdUsuario")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasMaxLength(50);

                            b1.Property<string>("CEP")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasMaxLength(2);

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasMaxLength(50);

                            b1.Property<string>("Complemento")
                                .HasColumnType("TEXT")
                                .HasMaxLength(100);

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasMaxLength(2);

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasMaxLength(100);

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasMaxLength(10);

                            b1.Property<string>("Referencia")
                                .HasColumnType("TEXT")
                                .HasMaxLength(100);

                            b1.HasKey("UsuarioIdUsuario");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioIdUsuario");
                        });
                });

            modelBuilder.Entity("crudProdutos.Models.Visitado", b =>
                {
                    b.HasOne("crudProdutos.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("crudProdutos.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
